@using System.Drawing
@using BasicBlazorLibrary.Components.Arrows 
@using BasicBlazorLibrary.Components.Divs
<CascadingValue Value="this" IsFixed="true">
    <div class="@GetFirstClass() main" style="padding: @Padding; font-size: @MainFontSize;  background-color: @MainBackgroundColor; color: @MainTextColor; ">
        <div class="firstflex">
            <div class="centerdiv">
                @if (BackClicked.HasDelegate == true && ShowBack)
                {
                    <div class="inline centerdiv" style="margin-right: 10px;">
                        <ArrowLeftComponent Clicked="BackClicked" BackgroundColor="white" StrokeColor="black" TargetHeight="@ArrowHeight" />
                    </div>
                }
                @Title
            </div>
            <div class="centerdiv">
                <div>
                    @if (BarContent != null)
                    {
                        @BarContent
                    }
                </div>
                @if (MenuList.Count > 0)
                {
                    <div class="inline centerdiv">
                        <CanvasContainerDiv Clicked="() => _showMenu = true"
                                            ViewPort="_viewPort"
                                            ContainerHeight="@GetContainer"
                                            ContainerWidth="@GetContainer"
                                            style="cursor: pointer;">

                            <CanvasElementDiv Location="new PointF(15, 2)">
                                <div style="width: @CircleSize; height: @CircleSize; background-color: @CircleColor; border-radius: 50%;">

                                </div>
                            </CanvasElementDiv>
                            <CanvasElementDiv Location="new PointF(15, 15)">
                                <div style="width: @CircleSize; height: @CircleSize; background-color: @CircleColor; border-radius: 50%;">

                                </div>
                            </CanvasElementDiv>
                            <CanvasElementDiv Location="new PointF(15, 28)">
                                <div style="width: @CircleSize; height: @CircleSize; background-color: @CircleColor; border-radius: 50%;">

                                </div>
                            </CanvasElementDiv>
                        </CanvasContainerDiv>
                    </div>
                }
                @if (CloseClicked.HasDelegate)
                {
                    <div class="inline centerdiv;" style="font-size: @CloseHeight; cursor:pointer;" @onclick="()=> CloseClicked.InvokeAsync()" >
                        X
                    </div>
                }
            </div>
        </div>
    </div>
    <MenuModal MenuList="MenuList"
                              BackgroundColor="@MenuBackgroundColor"
                              FontSize="@MenuFontSize"
                              Height="@MenuHeight"
                              TextColor="@MenuTextColor"
                              Width="@MenuWidth"
                              @bind-Visible="_showMenu" />
    @MainContent
</CascadingValue>